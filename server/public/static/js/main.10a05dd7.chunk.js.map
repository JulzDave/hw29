{"version":3,"sources":["comp/Register.js","comp/Login.js","comp/Header.js","App.js","serviceWorker.js","index.js"],"names":["Register","state","username","password","react_default","a","createElement","className","type","onChange","this","handleTextChange","bind","name","placeholder","value","onClick","sendForm","ev","setState","Object","defineProperty","target","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","rawResponse","json","Component","Login","action","Header","App","allUsers","_this2","BrowserRouter","Link","to","Route","path","component","render","comp_Register","refreshFunc","reDownloadData","exact","_this3","then","r","data","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.10a05dd7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../App.css';\n\nclass Register extends Component {\n  state = {\n    username: '',\n    password: ''\n  }\n\n  render() {\n    return (\n      <div className=\"Reg\"> <br /><br />\n        <h2>Register:</h2>\n        <input type='text' onChange={this.handleTextChange.bind(this)} name='username' placeholder='enter username' value={this.state.username}></input><br />\n        <input type='password' onChange={this.handleTextChange.bind(this)} name='password' placeholder='enter password' value={this.state.password}></input><br /><br />\n        <button onClick={this.sendForm.bind(this)}>Submit</button>\n      </div>\n    );\n  }\n\n  handleTextChange(ev) {\n    /*\n ev.target.value//returns the value\n ev.target.name //return the name (like 'name' or 'last')\n  */\n\n    this.setState({ [ev.target.name]: ev.target.value })\n\n    // details['name']= ev.target.value\n    //details.name=\"\" \n  }\n\n  async sendForm() {\n    const rawResponse = await fetch('http://localhost:3000/register', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(this.state)\n    })\n    let jsonData = await rawResponse.json();\n  }\n}\n\nexport default Register;\n","import React, { Component } from 'react';\nimport '../App.css';\n\nclass Login extends Component {\n\n  state = {\n    username: '',\n    password: ''\n  }\n\n  render() {\n    return (\n      <div className=\"Sign\"><br/><br/>\n           <form method='post' action='\\login'>\n        <h2>Sign in:</h2>\n        <input type='text' onChange={this.handleTextChange.bind(this)} name='username' placeholder='enter username' value={this.state.username}></input><br/>\n        <input type='password' onChange={this.handleTextChange.bind(this)} name='password' placeholder='enter password' value={this.state.password}></input><br/><br/>\n        <input type='submit'></input>\n     </form>\n      </div>\n    );\n  }\n\n  handleTextChange(ev) {\n    /*\n ev.target.value//returns the value\n ev.target.name //return the name (like 'name' or 'last')\n  */\n\n    this.setState({ [ev.target.name]: ev.target.value })\n\n    // details['name']= ev.target.value\n    //details.name=\"\" \n  }\n  \n  async sendForm() {\n    const rawResponse = await fetch('http://localhost:3000/login', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(this.state)\n    })\n    let jsonData = await rawResponse.json();\n  }\n}\n\nexport default Login;\n","import React, { Component } from 'react';\nimport '../App.css';\n\nclass Header extends Component {\n\n\n  render() {\n    return (\n      <div className=\"Reg\"> <br /><br /><br /><br /><br />\n        <h2>Welcome to this user Interface!</h2>\n        <h3>Please sign in or register</h3>\n      </div>\n    );\n  }\n\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Register from './comp/Register';\nimport Login from './comp/Login';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport Header from './comp/Header';\n\nclass App extends Component {\n  state={allUsers:[]} \n\n  render() {\n\n    return (\n      <Router>\n        <div className=\"App\">\n          <Link to=\"/login\">Sign in</Link>\n          <Link to=\"/register\">Register</Link>\n          <Link to=\"/\" className=\"home\">&#8962;</Link>\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/register\" render={() => <Register refreshFunc={this.reDownloadData.bind(this)} />} />\n          <Route exact path=\"/\" component={Header} />\n        \n        </div>\n      </Router>\n    );\n  }\n\n  reDownloadData()\n  {\n    fetch('http://localhost:3000/register').then(r => r.json())\n    .then((data)=>\n        {\n           this.setState({ allUsers:data }) \n        })\n   \n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}